<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Three.js OBJ Loader with Manual Rotation</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
    </style>
    <!-- Include Three.js library -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.119/build/three.min.js"></script>
    <!-- Include OBJLoader from Three.js examples -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.119/examples/js/loaders/OBJLoader.js"></script>
    <!-- Include OrbitControls from Three.js examples -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.119/examples/js/controls/OrbitControls.js"></script>
</head>
<body>
<script>
    // Create the scene
    const scene = new THREE.Scene();

    // Create a camera
    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 5000);
    camera.position.z = 500;
    camera.position.y = 400;
    camera.position.x = -400;

    // Create a renderer and attach it to the document
    const renderer = new THREE.WebGLRenderer();
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    // Add a light to the scene
    const light = new THREE.PointLight(0xffffff, 1, 2000);
    light.position.set(10, 200, 10);
    scene.add(light);

    // Add a plane to the scene
    const planeGeometry = new THREE.PlaneGeometry(500, 500); // Plane size: 1000x1000 units
    const planeMaterial = new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false });
    const plane = new THREE.Mesh(planeGeometry, planeMaterial);

    // Rotate the plane to be horizontal
    plane.rotation.x = -Math.PI / 2;

    // Position the plane below the object (adjust height as needed)
    plane.position.y = -100;

    // Add the plane to the scene
    //scene.add(plane);

    // Variable to hold the loaded object
    let loadedObject = null;

    // Load and display the OBJ file
    const loader = new THREE.OBJLoader();

    loader.load('starlink.obj', (object) => {
        // Set the loaded object to the variable
        loadedObject = object;

        // Add the loaded object to the scene
        scene.add(loadedObject);

        // Initial position and rotation of the object
        loadedObject.position.set(-20, -60, -150);
        loadedObject.rotation.x = 0;
        loadedObject.rotation.y = 0;

    },
    // onProgress callback
    (xhr) => {
        console.log((xhr.loaded / xhr.total * 100) + '% loaded');
    },
    // onError callback
    (error) => {
        console.error('An error occurred while loading the OBJ file.', error);
    });

    // Set up OrbitControls
    const controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
    controls.dampingFactor = 0.10;
    controls.enableZoom = false;
    controls.enablePan = false;
    controls.minPolarAngle = 1;
	controls.maxPolarAngle = 1.5;
    controls.maxAzimuthAngle = 0;
    controls.minAzimuthAngle = -2;


    // Animation loop
    function animate() {
        requestAnimationFrame(animate);

        // Update controls
        controls.update();

        // Render the scene
        renderer.render(scene, camera);
    }

    animate();

    // Handle window resizing
    window.addEventListener('resize', () => {
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
    });
</script>
</body>
</html>
